#lang racket

(require "classfile.rkt")
(require "classdefs.rkt")
(require "bytecode-conversion.rkt")
(require "descriptors.rkt")

(define (validate-flags flags options)
  (for ((flag flags))
    (unless (member flag options)
      (error "Flag not yet handled:" flag))))

(define (compute-visibility flags)
  (if (empty? flags)
      'package-private
      (let ((for-rest (compute-visibility (cdr flags))))
        (if (eq? for-rest 'package-private)
            (case (car flags)
              ((ACC_PUBLIC) 'public)
              ((ACC_PRIVATE) 'private)
              ((ACC_PROTECTED) 'protected)
              (else 'package-private))
            (if (member (car flags) '(ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED))
                (error "multiple visibility flags:" flags)
                for-rest)))))
(define (get-constant-value attrs)
  (and (not (empty? attrs))
       (or (and (eq? (caar attrs) 'ConstantValue)
                (cadar attrs))
           (get-constant-value (cdr attrs)))))
(define (convert-field f)
  (let ((flags (field_info-access_flags f)))
    ; TODO: handle other flags
    (validate-flags flags '(ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL))
    (jfield (field_info-name_index f)
            (convert-field-descriptor (field_info-descriptor_index f))
            (compute-visibility flags)
            (get-constant-value (field_info-attributes f))
            (if (member 'ACC_STATIC flags) #t #f)
            (if (member 'ACC_FINAL flags) #t #f))))
(define (convert-code-attr attr constant-pool)
  (bytecode-conversion (attribute_Code-max_stack attr)
                       (attribute_Code-max_locals attr)
                       (attribute_Code-code attr)
                       constant-pool))
(define (convert-code attrs constant-pool)
  (let ((found (filter (lambda (e) (eq? (car e) 'Code)) attrs)))
    (when (> (length found) 1)
      (error "Multiple code attributes???"))
    (if (empty? found)
        #f
        (convert-code-attr (cadar found) constant-pool))))
(define (convert-method constant-pool m)
  (let ((flags (method_info-access_flags m)))
    ; TODO: handle other flags
    (validate-flags flags '(ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC))
    (jmethod (method_info-name_index m)
             (convert-method-descriptor (method_info-descriptor_index m))
             (compute-visibility flags)
             (if (member 'ACC_STATIC flags) #t #f)
             (convert-code (method_info-attributes m) constant-pool))))
(define (load-classdef path)
  (let ((cls (load-classfile path)))
    (jclass (ClassFile-this_class cls)
            (ClassFile-super_class cls)
            (map convert-field (ClassFile-fields cls))
            (map (curry convert-method (ClassFile-constant_pool cls)) (ClassFile-methods cls)))))
(load-classdef "HelloWorld.class")
