#lang racket

(require "binary-structures.rkt")

(provide load-classfile ClassFile? ClassFile-minor_version ClassFile-major_version ClassFile-constant_pool ClassFile-access_flags
         ClassFile-this_class ClassFile-super_class ClassFile-interfaces ClassFile-fields ClassFile-methods ClassFile-attributes)
(provide field_info? field_info-access_flags field_info-name_index field_info-descriptor_index field_info-attributes)
(provide method_info? method_info-access_flags method_info-name_index method_info-descriptor_index method_info-attributes)
(provide attribute_Code-max_stack attribute_Code-max_locals attribute_Code-code attribute_Code-exception_table attribute_Code-attributes)
(provide exception_table_entry? exception_table_entry-start_pc exception_table_entry-end_pc exception_table_entry-handler_pc exception_table_entry-catch_type)

(define magic-number 3405691582) ; 0xCAFEBABE

(define (process-constant-pool-1 pool)
  (for/list ((e pool))
    (cond ((CONSTANT_Class? e) (string->symbol (list-ref pool (CONSTANT_Class-name_index e))))
          ((CONSTANT_String? e) (list-ref pool (CONSTANT_String-string_index e)))
          ((CONSTANT_NameAndType? e) (list (list-ref pool (CONSTANT_NameAndType-name_index e))
                                           (list-ref pool (CONSTANT_NameAndType-descriptor_index e))))
          (else e))))
(define (process-constant-pool-2 pool)
  (for/list ((e pool))
    (cond ((CONSTANT_Methodref? e)
           (cons (list-ref pool (CONSTANT_Methodref-class_index e))
                 (list-ref pool (CONSTANT_Methodref-name_and_type_index e))))
          ((CONSTANT_Fieldref? e)
           (cons (list-ref pool (CONSTANT_Fieldref-class_index e))
                 (list-ref pool (CONSTANT_Fieldref-name_and_type_index e))))
          ((CONSTANT_InterfaceMethodref? e)
           (cons (list-ref pool (CONSTANT_InterfaceMethodref-class_index e))
                 (list-ref pool (CONSTANT_InterfaceMethodref-name_and_type_index e))))
          (else e))))

(define (parse-class-flags flags)
  (parse-flags flags '(ACC_PUBLIC _ _ _ ACC_FINAL ACC_SUPER _ _ _ ACC_INTERFACE ACC_ABSTRACT _ ACC_SYNTHETIC ACC_ANNOTATION ACC_ENUM) #:none '_))
(define (parse-field-flags flags)
  (parse-flags flags '(ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL _ ACC_VOLATILE ACC_TRANSIENT _ _ _ _ ACC_SYNTHETIC _ ACC_ENUM) #:none '_))
(define (parse-method-flags flags)
  (parse-flags flags '(ACC_PUBLIC ACC_PRIVATE ACC_PROTECTED ACC_STATIC ACC_FINAL ACC_SYNCHRONIZED ACC_BRIDGE ACC_VARARGS ACC_NATIVE _ ACC_ABSTRACT ACC_STRICT ACC_SYNTHETIC) #:none '_))

(binstruct ClassFile
           (u4 magic)
           (#:guard (= magic magic-number))
           (#:omit magic)
           (u2 minor_version)
           (#:guard (= minor_version 0))
           (u2 major_version)
           (#:guard (= major_version 51))
           (u2 constant_pool_count)
           (#:omit constant_pool_count)
           ((array cp_info (- constant_pool_count 1)) constant_pool) ; index-shifted by one
           (#:let (constant_pool (process-constant-pool-2 (process-constant-pool-1 (cons (void) constant_pool)))))
           (u2 access_flags)
           (#:let (access_flags (parse-class-flags access_flags)))
           (u2 this_class)
           (#:let (this_class (list-ref constant_pool this_class)))
           (u2 super_class)
           (#:let (super_class (list-ref constant_pool super_class)))
           (u2 interfaces_count)
           (#:omit interfaces_count)
           ((array u2 interfaces_count) interfaces)
           (#:let (interfaces (map (curry list-ref constant_pool) interfaces)))
           (u2 fields_count)
           (#:omit fields_count)
           ((array (field_info constant_pool) fields_count) fields)
           (u2 methods_count)
           (#:omit methods_count)
           ((array (method_info constant_pool) methods_count) methods)
           (u2 attributes_count)
           (#:omit attributes_count)
           ((array (attribute_info constant_pool) attributes_count) attributes))
(binstruct cp_info
           (u1 tag)
           ((case tag
              ((7) CONSTANT_Class)
              ((9) CONSTANT_Fieldref)
              ((10) CONSTANT_Methodref)
              ((11) CONSTANT_InterfaceMethodref)
              ((8) CONSTANT_String)
              ;((3) CONSTANT_Integer)
              ;((4) CONSTANT_Float)
              ;((5) CONSTANT_Long)
              ;((6) CONSTANT_Double)
              ((12) CONSTANT_NameAndType)
              ((1) CONSTANT_Utf8)
              ;((15) CONSTANT_MethodHandle)
              ;((16) CONSTANT_MethodType)
              ;((18) CONSTANT_InvokeDynamic)
              (else (error "invalid tag" tag))
              ) body)
           #:return-expression body)

(binstruct CONSTANT_Class
           (u2 name_index))
(binstruct CONSTANT_Fieldref
           (u2 class_index)
           (u2 name_and_type_index))
(binstruct CONSTANT_Methodref
           (u2 class_index)
           (u2 name_and_type_index))
(binstruct CONSTANT_InterfaceMethodref
           (u2 class_index)
           (u2 name_and_type_index))
(binstruct CONSTANT_String
           (u2 string_index))
(binstruct CONSTANT_NameAndType
           (u2 name_index)
           (u2 descriptor_index))
(binstruct CONSTANT_Utf8
           (u2 length)
           ((array u1 length) bytes)
           #:return-expression (bytes->string/utf-8 (list->bytes bytes)))

(binstruct (field_info constant_pool)
           (u2 access_flags)
           (#:let (access_flags (parse-field-flags access_flags)))
           (u2 name_index)
           (#:let (name_index (string->symbol (list-ref constant_pool name_index))))
           (u2 descriptor_index)
           (#:let (descriptor_index (list-ref constant_pool descriptor_index)))
           (u2 attributes_count)
           (#:omit attributes_count)
           ((array (attribute_info constant_pool) attributes_count) attributes))
(binstruct (method_info constant_pool)
           (u2 access_flags)
           (#:let (access_flags (parse-method-flags access_flags)))
           (u2 name_index)
           (#:let (name_index (string->symbol (list-ref constant_pool name_index))))
           (u2 descriptor_index)
           (#:let (descriptor_index (list-ref constant_pool descriptor_index)))
           (u2 attributes_count)
           (#:omit attributes_count)
           ((array (attribute_info constant_pool) attributes_count) attributes))
(binstruct (attribute_info constant_pool)
           (u2 attribute_name_index)
           (#:let (attribute_name (string->symbol (list-ref constant_pool attribute_name_index))))
           ((case attribute_name
              ((ConstantValue) (attribute_ConstantValue constant_pool))
              ((Code) (attribute_Code constant_pool))
              (else attribute_generic)) body)
           #:return-expression (list attribute_name body))
(binstruct attribute_generic
           (u4 attribute_length)
           ((array u1 attribute_length) info)
           #:return-expression info)
(binstruct (attribute_ConstantValue constant_pool)
           (u4 attribute_length)
           (#:guard (= attribute_length 2))
           (u2 constantvalue_index)
           #:return-expression (list-ref constant_pool constantvalue_index))
(binstruct (attribute_Code constant_pool)
           (u4 attribute_length) ; TODO: check this?
           (#:omit attribute_length)
           (u2 max_stack)
           (u2 max_locals)
           (u4 code_length)
           (#:omit code_length)
           ((array u1 code_length) code)
           (#:let (code (list->bytes code)))
           (u2 exception_table_length)
           (#:omit exception_table_length)
           ((array (exception_table_entry constant_pool) exception_table_length) exception_table)
           (u2 attributes_count)
           (#:omit attributes_count)
           ((array (attribute_info constant_pool) attributes_count) attributes))
(binstruct (exception_table_entry constant_pool)
           (u2 start_pc)
           (u2 end_pc)
           (u2 handler_pc)
           (u2 catch_type)
           (#:let (catch_type (list-ref constant_pool catch_type))))

(define (load-classfile path)
  (load-file ClassFile path))
