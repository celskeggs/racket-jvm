#lang racket

(require "classdefs.rkt")

(provide convert-field-descriptor convert-method-descriptor get-bytelen-for-type)

(define (get-primitive-type-descriptor desc)
  (car (filter (lambda (x) (equal? desc (jtype-desc x))) primitive-types)))
(define (primitive-type-descriptor? desc)
  (if (member desc primitive-type-descriptors)
      #t #f))
(define (convert-type-descriptors desc #:allow-void allow-void)
  (if (= (string-length desc) 0)
    empty
    (let ((head (substring desc 0 1))
          (tail (substring desc 1)))
      (if (primitive-type-descriptor? head)
          (if (and (equal? head "V") (not allow-void))
              (error "void type not allowed")
              (cons (get-primitive-type-descriptor head)
                    (convert-type-descriptors tail #:allow-void allow-void)))
          (case head
            (("L") (let ((cls (car (string-split tail ";" #:trim? #f))))
                     (cons (jclasstype cls)
                           (convert-type-descriptors (substring tail (+ 1 (string-length cls))) #:allow-void allow-void))))
            (("[") (let ((subr (convert-type-descriptors tail #:allow-void allow-void)))
                     (cons (jarraytype (car subr))
                           (cdr subr))))
            (else (error "Invalid descriptor:" desc)))))))
(define (convert-field-descriptor desc #:allow-void (allow-void #f))
  (let ((descs (convert-type-descriptors desc #:allow-void allow-void)))
    (unless (= 1 (length descs))
      (error "Invalid field descriptor:" desc))
    (car descs)))
(define (convert-method-descriptor desc)
  (unless (char=? #\( (string-ref desc 0))
    (error "bad method descriptor:" desc))
  (let ((parts (string-split (substring desc 1) ")" #:trim? #f)))
    (unless (= (length parts) 2)
      (error "bad method descriptor:" desc parts))
    (list (convert-type-descriptors (car parts) #:allow-void #f)
          (convert-field-descriptor (cadr parts) #:allow-void #t))))

(define (get-bytelen-for-type t)
  (if (jtype-primitive? t)
      (case (jtype-name t)
        ((byte) 1)
        ((char) 2)
        ((double) 8)
        ((float) 4)
        ((int) 4)
        ((long) 8)
        ((short) 2)
        ((bool) 1) ; TODO: make this more space-efficient?
        (else (error "primitive type has no defined length:" t)))
      (if (or (jtype-class? t) (jtype-array? t))
          4
          (error "cannot compute size: unknown type:" t))))
